{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\order.js"
    ],
    "names": [
        "Base",
        "require",
        "moment",
        "rp",
        "fs",
        "http",
        "module",
        "exports",
        "listAction",
        "showType",
        "get",
        "page",
        "size",
        "status",
        "model",
        "getOrderStatus",
        "is_delete",
        "orderList",
        "field",
        "where",
        "user_id",
        "think",
        "userId",
        "order_type",
        "order_status",
        "order",
        "countSelect",
        "newOrderList",
        "item",
        "data",
        "goodsList",
        "order_id",
        "id",
        "select",
        "goodsCount",
        "forEach",
        "v",
        "number",
        "add_time",
        "unix",
        "getOrderAddTime",
        "format",
        "order_status_text",
        "getOrderStatusText",
        "handleOption",
        "getOrderHandleOption",
        "push",
        "success",
        "countAction",
        "allCount",
        "count",
        "orderCountAction",
        "toPay",
        "toDelivery",
        "toReceive",
        "newStatus",
        "detailAction",
        "orderId",
        "orderInfo",
        "find",
        "currentTime",
        "parseInt",
        "Date",
        "getTime",
        "isEmpty",
        "fail",
        "province_name",
        "province",
        "getField",
        "city_name",
        "city",
        "district_name",
        "district",
        "full_region",
        "postscript",
        "Buffer",
        "from",
        "toString",
        "orderGoods",
        "gitem",
        "confirm_time",
        "dealdone_time",
        "pay_time",
        "shipping_time",
        "confirm_remainTime",
        "final_pay_time",
        "updateInfo",
        "update",
        "textCode",
        "getOrderTextCode",
        "orderGoodsAction",
        "cartList",
        "checked",
        "is_fast",
        "cancelAction",
        "post",
        "cancel",
        "goodsInfo",
        "goods_id",
        "product_id",
        "increment",
        "succesInfo",
        "deleteAction",
        "delete",
        "orderDeleteById",
        "confirmAction",
        "confirm",
        "completeAction",
        "submitAction",
        "addressId",
        "freightPrice",
        "offlinePay",
        "buffer",
        "checkedAddress",
        "checkedGoodsList",
        "checkPrice",
        "checkStock",
        "product",
        "goods_number",
        "retail_price",
        "add_price",
        "goodsTotalPrice",
        "cartItem",
        "orderTotalPrice",
        "actualPrice",
        "print_info",
        "i",
        "Number",
        "goods_aka",
        "def",
        "sender_name",
        "Name",
        "sender_mobile",
        "Tel",
        "userInfo",
        "order_sn",
        "generateOrderNumber",
        "consignee",
        "name",
        "mobile",
        "province_id",
        "city_id",
        "district_id",
        "address",
        "freight_price",
        "goods_price",
        "order_price",
        "actual_price",
        "change_price",
        "offline_pay",
        "add",
        "orderGoodsData",
        "goodsItem",
        "goods_name",
        "list_pic_url",
        "goods_specifition_name_value",
        "goods_specifition_ids",
        "addMany",
        "clearBuyGoods",
        "updateAction",
        "updateAddress",
        "expressAction",
        "info",
        "expressInfo",
        "updateTime",
        "update_time",
        "com",
        "is_finish",
        "shipperCode",
        "shipper_code",
        "expressNo",
        "logistic_code",
        "code",
        "substring",
        "shipperName",
        "sfLastNo",
        "config",
        "lastExpressInfo",
        "getExpressInfo",
        "deliverystatus",
        "newUpdateTime",
        "getDeliverystatus",
        "issign",
        "traces",
        "list",
        "JSON",
        "stringify",
        "dataInfo",
        "express_status",
        "express",
        "appCode",
        "options",
        "method",
        "url",
        "headers",
        "sessionData",
        "parse",
        "result"
    ],
    "mappings": "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",
    "file": "..\\..\\..\\src\\api\\controller\\order.js",
    "sourcesContent": [
        "const Base = require('./base.js');\r\nconst moment = require('moment');\r\nconst rp = require('request-promise');\r\nconst fs = require('fs');\r\nconst http = require(\"http\");\r\nmodule.exports = class extends Base {\r\n    /**\r\n     * 获取订单列表\r\n     * @return {Promise} []\r\n     */\r\n    async listAction() {\r\n        const showType = this.get('showType');\r\n        const page = this.get('page');\r\n        const size = this.get('size');\r\n        let status = [];\r\n        status = await this.model('order').getOrderStatus(showType);\r\n        let is_delete = 0;\r\n        // const orderList = await this.model('order').where({ user_id: think.userId }).page(1, 10).order('add_time DESC').countSelect();\r\n        const orderList = await this.model('order').field('id,add_time,actual_price,freight_price,offline_pay').where({\r\n            user_id: think.userId,\r\n            is_delete: is_delete,\r\n            order_type: ['<', 7],\r\n            order_status: ['IN', status]\r\n        }).page(page, size).order('add_time DESC').countSelect();\r\n        const newOrderList = [];\r\n        for (const item of orderList.data) {\r\n            // 订单的商品\r\n            item.goodsList = await this.model('order_goods').field('id,list_pic_url,number').where({\r\n                user_id: think.userId,\r\n                order_id: item.id,\r\n                is_delete: 0\r\n            }).select();\r\n            item.goodsCount = 0;\r\n            item.goodsList.forEach(v => {\r\n                item.goodsCount += v.number;\r\n            });\r\n            item.add_time = moment.unix(await this.model('order').getOrderAddTime(item.id)).format('YYYY-MM-DD HH:mm:ss');\r\n            // item.dealdone_time = moment.unix(await this.model('order').getOrderAddTime(item.id)).format('YYYY-MM-DD HH:mm:ss');\r\n            // item.add_time =this.timestampToTime(await this.model('order').getOrderAddTime(item.id));\r\n            // 订单状态的处理\r\n            item.order_status_text = await this.model('order').getOrderStatusText(item.id);\r\n            // 可操作的选项\r\n            item.handleOption = await this.model('order').getOrderHandleOption(item.id);\r\n            newOrderList.push(item);\r\n        }\r\n        orderList.data = newOrderList;\r\n        return this.success(orderList);\r\n    }\r\n    // 获得订单数量\r\n    //\r\n    async countAction() {\r\n        const showType = this.get('showType');\r\n        let status = [];\r\n        status = await this.model('order').getOrderStatus(showType);\r\n        let is_delete = 0;\r\n        const allCount = await this.model('order').where({\r\n            user_id: think.userId,\r\n            is_delete: is_delete,\r\n            order_status: ['IN', status]\r\n        }).count('id');\r\n        return this.success({\r\n            allCount: allCount,\r\n        });\r\n    }\r\n    // 获得订单数量状态\r\n    //\r\n    async orderCountAction() {\r\n        let user_id = think.userId;\r\n        let toPay = await this.model('order').where({\r\n            user_id: user_id,\r\n            is_delete: 0,\r\n            order_type: ['<', 7],\r\n            order_status: ['IN', '101,801']\r\n        }).count('id');\r\n        let toDelivery = await this.model('order').where({\r\n            user_id: user_id,\r\n            is_delete: 0,\r\n            order_type: ['<', 7],\r\n            order_status: 300\r\n        }).count('id');\r\n        let toReceive = await this.model('order').where({\r\n            user_id: user_id,\r\n            order_type: ['<', 7],\r\n            is_delete: 0,\r\n            order_status: 301\r\n        }).count('id');\r\n        let newStatus = {\r\n            toPay: toPay,\r\n            toDelivery: toDelivery,\r\n            toReceive: toReceive,\r\n        }\r\n        return this.success(newStatus);\r\n    }\r\n    async detailAction() {\r\n        const orderId = this.get('orderId');\r\n        const orderInfo = await this.model('order').where({\r\n            user_id: think.userId,\r\n            id: orderId\r\n        }).find();\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        if (think.isEmpty(orderInfo)) {\r\n            return this.fail('订单不存在');\r\n        }\r\n        orderInfo.province_name = await this.model('region').where({\r\n            id: orderInfo.province\r\n        }).getField('name', true);\r\n        orderInfo.city_name = await this.model('region').where({\r\n            id: orderInfo.city\r\n        }).getField('name', true);\r\n        orderInfo.district_name = await this.model('region').where({\r\n            id: orderInfo.district\r\n        }).getField('name', true);\r\n        orderInfo.full_region = orderInfo.province_name + orderInfo.city_name + orderInfo.district_name;\r\n        orderInfo.postscript = Buffer.from(orderInfo.postscript, 'base64').toString();\r\n        const orderGoods = await this.model('order_goods').where({\r\n            user_id: think.userId,\r\n            order_id: orderId,\r\n            is_delete: 0\r\n        }).select();\r\n        var goodsCount = 0;\r\n        for (const gitem of orderGoods) {\r\n            goodsCount += gitem.number;\r\n        }\r\n        // 订单状态的处理\r\n        orderInfo.order_status_text = await this.model('order').getOrderStatusText(orderId);\r\n        if (think.isEmpty(orderInfo.confirm_time)) {\r\n            orderInfo.confirm_time = 0;\r\n        } else orderInfo.confirm_time = moment.unix(orderInfo.confirm_time).format('YYYY-MM-DD HH:mm:ss');\r\n        if (think.isEmpty(orderInfo.dealdone_time)) {\r\n            orderInfo.dealdone_time = 0;\r\n        } else orderInfo.dealdone_time = moment.unix(orderInfo.dealdone_time).format('YYYY-MM-DD HH:mm:ss');\r\n        if (think.isEmpty(orderInfo.pay_time)) {\r\n            orderInfo.pay_time = 0;\r\n        } else orderInfo.pay_time = moment.unix(orderInfo.pay_time).format('YYYY-MM-DD HH:mm:ss');\r\n        if (think.isEmpty(orderInfo.shipping_time)) {\r\n            orderInfo.shipping_time = 0;\r\n        } else {\r\n            orderInfo.confirm_remainTime = orderInfo.shipping_time + 10 * 24 * 60 * 60;\r\n            orderInfo.shipping_time = moment.unix(orderInfo.shipping_time).format('YYYY-MM-DD HH:mm:ss');\r\n        }\r\n        // 订单支付倒计时\r\n        if (orderInfo.order_status === 101 || orderInfo.order_status === 801) {\r\n            // if (moment().subtract(60, 'minutes') < moment(orderInfo.add_time)) {\r\n            orderInfo.final_pay_time = orderInfo.add_time + 24 * 60 * 60; //支付倒计时2小时\r\n            if (orderInfo.final_pay_time < currentTime) {\r\n                //超过时间不支付，更新订单状态为取消\r\n                let updateInfo = {\r\n                    order_status: 102\r\n                };\r\n                await this.model('order').where({\r\n                    id: orderId\r\n                }).update(updateInfo);\r\n            }\r\n        }\r\n        orderInfo.add_time = moment.unix(orderInfo.add_time).format('YYYY-MM-DD HH:mm:ss');\r\n        orderInfo.order_status = '';\r\n        // 订单可操作的选择,删除，支付，收货，评论，退换货\r\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\r\n        const textCode = await this.model('order').getOrderTextCode(orderId);\r\n        return this.success({\r\n            orderInfo: orderInfo,\r\n            orderGoods: orderGoods,\r\n            handleOption: handleOption,\r\n            textCode: textCode,\r\n            goodsCount: goodsCount,\r\n        });\r\n    }\r\n    /**\r\n     * order 和 order-check 的goodslist\r\n     * @return {Promise} []\r\n     */\r\n    async orderGoodsAction() {\r\n        const orderId = this.get('orderId');\r\n        if (orderId > 0) {\r\n            const orderGoods = await this.model('order_goods').where({\r\n                user_id: think.userId,\r\n                order_id: orderId,\r\n                is_delete: 0\r\n            }).select();\r\n            var goodsCount = 0;\r\n            for (const gitem of orderGoods) {\r\n                goodsCount += gitem.number;\r\n            }\r\n            return this.success(orderGoods);\r\n        } else {\r\n            const cartList = await this.model('cart').where({\r\n                user_id: think.userId,\r\n                checked:1,\r\n                is_delete: 0,\r\n                is_fast: 0,\r\n            }).select();\r\n            return this.success(cartList);\r\n        }\r\n    }\r\n    /**\r\n     * 取消订单\r\n     * @return {Promise} []\r\n     */\r\n    async cancelAction() {\r\n        const orderId = this.post('orderId');\r\n        // 检测是否能够取消\r\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\r\n        // console.log('--------------' + handleOption.cancel);\r\n        if (!handleOption.cancel) {\r\n            return this.fail('订单不能取消');\r\n        }\r\n        // 设置订单已取消状态\r\n        let updateInfo = {\r\n            order_status: 102\r\n        };\r\n        let orderInfo = await this.model('order').field('order_type').where({\r\n            id: orderId,\r\n            user_id: think.userId\r\n        }).find();\r\n        //取消订单，还原库存\r\n        const goodsInfo = await this.model('order_goods').where({\r\n            order_id: orderId,\r\n            user_id: think.userId\r\n        }).select();\r\n        for (const item of goodsInfo) {\r\n            let goods_id = item.goods_id;\r\n            let product_id = item.product_id;\r\n            let number = item.number;\r\n            await this.model('goods').where({\r\n                id: goods_id\r\n            }).increment('goods_number', number);\r\n            await this.model('product').where({\r\n                id: product_id\r\n            }).increment('goods_number', number);\r\n        }\r\n        const succesInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).update(updateInfo);\r\n        return this.success(succesInfo);\r\n    }\r\n    /**\r\n     * 删除订单\r\n     * @return {Promise} []\r\n     */\r\n    async deleteAction() {\r\n        const orderId = this.post('orderId');\r\n        // 检测是否能够取消\r\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\r\n        if (!handleOption.delete) {\r\n            return this.fail('订单不能删除');\r\n        }\r\n        const succesInfo = await this.model('order').orderDeleteById(orderId);\r\n        return this.success(succesInfo);\r\n    }\r\n    /**\r\n     * 确认订单\r\n     * @return {Promise} []\r\n     */\r\n    async confirmAction() {\r\n        const orderId = this.post('orderId');\r\n        // 检测是否能够取消\r\n        const handleOption = await this.model('order').getOrderHandleOption(orderId);\r\n        if (!handleOption.confirm) {\r\n            return this.fail('订单不能确认');\r\n        }\r\n        // 设置订单已取消状态\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        let updateInfo = {\r\n            order_status: 401,\r\n            confirm_time: currentTime\r\n        };\r\n        const succesInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).update(updateInfo);\r\n        return this.success(succesInfo);\r\n    }\r\n    /**\r\n     * 完成评论后的订单\r\n     * @return {Promise} []\r\n     */\r\n    async completeAction() {\r\n        const orderId = this.get('orderId');\r\n        // 设置订单已完成\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        let updateInfo = {\r\n            order_status: 401,\r\n            dealdone_time: currentTime\r\n        };\r\n        const succesInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).update(updateInfo);\r\n        return this.success(succesInfo);\r\n    }\r\n    /**\r\n     * 提交订单\r\n     * @returns {Promise.<void>}\r\n     */\r\n    async submitAction() {\r\n        // 获取收货地址信息和计算运费\r\n        const addressId = this.post('addressId');\r\n        const freightPrice = this.post('freightPrice');\r\n        const offlinePay = this.post('offlinePay');\r\n        let postscript = this.post('postscript');\r\n        const buffer = Buffer.from(postscript); // 留言\r\n        const checkedAddress = await this.model('address').where({\r\n            id: addressId\r\n        }).find();\r\n        if (think.isEmpty(checkedAddress)) {\r\n            return this.fail('请选择收货地址');\r\n        }\r\n        // 获取要购买的商品\r\n        const checkedGoodsList = await this.model('cart').where({\r\n            user_id: think.userId,\r\n            checked: 1,\r\n            is_delete: 0\r\n        }).select();\r\n        if (think.isEmpty(checkedGoodsList)) {\r\n            return this.fail('请选择商品');\r\n        }\r\n        let checkPrice = 0;\r\n        let checkStock = 0;\r\n        for(const item of checkedGoodsList){\r\n            let product = await this.model('product').where({\r\n                id:item.product_id\r\n            }).find();\r\n            if(item.number > product.goods_number){\r\n                checkStock++;\r\n            }\r\n            if(item.retail_price != item.add_price){\r\n                checkPrice++;\r\n            }\r\n        }\r\n        if(checkStock > 0){\r\n            return this.fail(400, '库存不足，请重新下单');\r\n        }\r\n        if(checkPrice > 0){\r\n            return this.fail(400, '价格发生变化，请重新下单');\r\n        }\r\n        // 获取订单使用的红包\r\n        // 如果有用红包，则将红包的数量减少，当减到0时，将该条红包删除\r\n        // 统计商品总价\r\n        let goodsTotalPrice = 0.00;\r\n        for (const cartItem of checkedGoodsList) {\r\n            goodsTotalPrice += cartItem.number * cartItem.retail_price;\r\n        }\r\n        // 订单价格计算\r\n        const orderTotalPrice = goodsTotalPrice + freightPrice; // 订单的总价\r\n        const actualPrice = orderTotalPrice - 0.00; // 减去其它支付的金额后，要实际支付的金额 比如满减等优惠\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        let print_info = '';\r\n        for (const item in checkedGoodsList) {\r\n            let i = Number(item) + 1;\r\n            print_info = print_info + i + '、' + checkedGoodsList[item].goods_aka + '【' + checkedGoodsList[item].number + '】 ';\r\n        }\r\n        let def = await this.model('settings').where({\r\n            id: 1\r\n        }).find();\r\n        let sender_name = def.Name;\r\n        let sender_mobile = def.Tel;\r\n        // let sender_address = '';\r\n        let userInfo = await this.model('user').where({\r\n            id: think.userId\r\n        }).find();\r\n        // const checkedAddress = await this.model('address').where({id: addressId}).find();\r\n        const orderInfo = {\r\n            order_sn: this.model('order').generateOrderNumber(),\r\n            user_id: think.userId,\r\n            // 收货地址和运费\r\n            consignee: checkedAddress.name,\r\n            mobile: checkedAddress.mobile,\r\n            province: checkedAddress.province_id,\r\n            city: checkedAddress.city_id,\r\n            district: checkedAddress.district_id,\r\n            address: checkedAddress.address,\r\n            order_status: 101, // 订单初始状态为 101\r\n            // 根据城市得到运费，这里需要建立表：所在城市的具体运费\r\n            freight_price: freightPrice,\r\n            postscript: buffer.toString('base64'),\r\n            add_time: currentTime,\r\n            goods_price: goodsTotalPrice,\r\n            order_price: orderTotalPrice,\r\n            actual_price: actualPrice,\r\n            change_price: actualPrice,\r\n            print_info: print_info,\r\n            offline_pay:offlinePay\r\n        };\r\n        // 开启事务，插入订单信息和订单商品\r\n        const orderId = await this.model('order').add(orderInfo);\r\n        orderInfo.id = orderId;\r\n        if (!orderId) {\r\n            return this.fail('订单提交失败');\r\n        }\r\n        // 将商品信息录入数据库\r\n        const orderGoodsData = [];\r\n        for (const goodsItem of checkedGoodsList) {\r\n            orderGoodsData.push({\r\n                user_id: think.userId,\r\n                order_id: orderId,\r\n                goods_id: goodsItem.goods_id,\r\n                product_id: goodsItem.product_id,\r\n                goods_name: goodsItem.goods_name,\r\n                goods_aka: goodsItem.goods_aka,\r\n                list_pic_url: goodsItem.list_pic_url,\r\n                retail_price: goodsItem.retail_price,\r\n                number: goodsItem.number,\r\n                goods_specifition_name_value: goodsItem.goods_specifition_name_value,\r\n                goods_specifition_ids: goodsItem.goods_specifition_ids\r\n            });\r\n        }\r\n        await this.model('order_goods').addMany(orderGoodsData);\r\n        await this.model('cart').clearBuyGoods();\r\n        return this.success({\r\n            orderInfo: orderInfo\r\n        });\r\n    }\r\n    async updateAction() {\r\n        const addressId = this.post('addressId');\r\n        const orderId = this.post('orderId');\r\n        // 备注\r\n        // let postscript = this.post('postscript');\r\n        // const buffer = Buffer.from(postscript);\r\n        const updateAddress = await this.model('address').where({\r\n            id: addressId\r\n        }).find();\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        const orderInfo = {\r\n            // 收货地址和运费\r\n            consignee: updateAddress.name,\r\n            mobile: updateAddress.mobile,\r\n            province: updateAddress.province_id,\r\n            city: updateAddress.city_id,\r\n            district: updateAddress.district_id,\r\n            address: updateAddress.address,\r\n            // TODO 根据地址计算运费\r\n            // freight_price: 0.00,\r\n            // 备注\r\n            // postscript: buffer.toString('base64'),\r\n            // add_time: currentTime\r\n        };\r\n        const updateInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).update(orderInfo);\r\n        return this.success(updateInfo);\r\n    }\r\n    /**\r\n     * 查询物流信息asd\r\n     * @returns {Promise.<void>}\r\n     */\r\n    async expressAction() {\r\n        // let aliexpress = think.config('aliexpress');\r\n        const currentTime = parseInt(new Date().getTime() / 1000);\r\n        const orderId = this.get('orderId');\r\n        let info = await this.model('order_express').where({\r\n            order_id: orderId\r\n        }).find();\r\n        if (think.isEmpty(info)) {\r\n            return this.fail(400, '暂无物流信息');\r\n        }\r\n        const expressInfo = await this.model('order_express').where({\r\n            order_id: orderId\r\n        }).find();\r\n        // 如果is_finish == 1；或者 updateTime 小于 10分钟，\r\n        let updateTime = info.update_time;\r\n        let com = (currentTime - updateTime) / 60;\r\n        let is_finish = info.is_finish;\r\n        if (is_finish == 1) {\r\n            return this.success(expressInfo);\r\n        } else if (updateTime != 0 && com < 20) {\r\n            return this.success(expressInfo);\r\n        } else {\r\n            let shipperCode = expressInfo.shipper_code;\r\n            let expressNo = expressInfo.logistic_code;\r\n            let code = shipperCode.substring(0, 2);\r\n            let shipperName = '';\r\n\t\t\tlet sfLastNo = think.config('aliexpress.sfLastNo');\r\n            if (code == \"SF\") {\r\n                shipperName = \"SFEXPRESS\";\r\n                expressNo = expressNo + ':'+ sfLastNo;\r\n            } else {\r\n                shipperName = shipperCode;\r\n            }\r\n            let lastExpressInfo = await this.getExpressInfo(shipperName, expressNo);\r\n            let deliverystatus = lastExpressInfo.deliverystatus;\r\n            let newUpdateTime = lastExpressInfo.updateTime;\r\n            newUpdateTime = parseInt(new Date(newUpdateTime).getTime() / 1000);\r\n            deliverystatus = await this.getDeliverystatus(deliverystatus);\r\n            let issign = lastExpressInfo.issign;\r\n            let traces = lastExpressInfo.list;\r\n            traces = JSON.stringify(traces);\r\n            let dataInfo = {\r\n                express_status: deliverystatus,\r\n                is_finish: issign,\r\n                traces: traces,\r\n                update_time: newUpdateTime\r\n            }\r\n            await this.model('order_express').where({\r\n                order_id: orderId\r\n            }).update(dataInfo);\r\n            let express = await this.model('order_express').where({\r\n                order_id: orderId\r\n            }).find();\r\n            return this.success(express);\r\n        }\r\n        // return this.success(latestExpressInfo);\r\n    }\r\n    async getExpressInfo(shipperName, expressNo) {\r\n\t\tlet appCode = \"APPCODE \"+ think.config('aliexpress.appcode');\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'http://wuliu.market.alicloudapi.com/kdi?no=' + expressNo + '&type=' + shipperName,\r\n            headers: {\r\n                \"Content-Type\": \"application/json; charset=utf-8\",\r\n                \"Authorization\": appCode\r\n            }\r\n        };\r\n        let sessionData = await rp(options);\r\n        sessionData = JSON.parse(sessionData);\r\n        return sessionData.result;\r\n    }\r\n    async getDeliverystatus(status) {\r\n        if (status == 0) {\r\n            return '快递收件(揽件)';\r\n        } else if (status == 1) {\r\n            return '在途中';\r\n        } else if (status == 2) {\r\n            return '正在派件';\r\n        } else if (status == 3) {\r\n            return '已签收';\r\n        } else if (status == 4) {\r\n            return '派送失败(无法联系到收件人或客户要求择日派送，地址不详或手机号不清)';\r\n        } else if (status == 5) {\r\n            return '疑难件(收件人拒绝签收，地址有误或不能送达派送区域，收费等原因无法正常派送)';\r\n        } else if (status == 6) {\r\n            return '退件签收';\r\n        }\r\n    }\r\n};"
    ]
}