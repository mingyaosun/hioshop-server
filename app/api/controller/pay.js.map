{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\pay.js"
    ],
    "names": [
        "Base",
        "require",
        "moment",
        "generate",
        "Jushuitan",
        "module",
        "exports",
        "preWeixinPayaAction",
        "orderId",
        "get",
        "orderInfo",
        "model",
        "where",
        "id",
        "find",
        "userId",
        "user_id",
        "result",
        "transaction_id",
        "time_end",
        "parseInt",
        "Date",
        "getTime",
        "orderModel",
        "updatePayData",
        "afterPay",
        "success",
        "preWeixinPayAction",
        "orderGoods",
        "order_id",
        "is_delete",
        "select",
        "checkPrice",
        "checkStock",
        "item",
        "product",
        "product_id",
        "number",
        "goods_number",
        "retail_price",
        "fail",
        "think",
        "isEmpty",
        "pay_status",
        "openid",
        "getField",
        "WeixinSerivce",
        "service",
        "returnParams",
        "createUnifiedOrder",
        "body",
        "order_sn",
        "out_trade_no",
        "total_fee",
        "actual_price",
        "spbill_create_ip",
        "err",
        "notifyAction",
        "data",
        "post",
        "payNotify",
        "echo",
        "json",
        "getOrderByOrderSn",
        "bool",
        "checkPayStatus",
        "order_type",
        "orderGoodsList",
        "cartItem",
        "goods_id",
        "specification",
        "goods_specifition_name_value",
        "decrement",
        "increment"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,SAASD,QAAQ,QAAR,CAAf;AACA,MAAME,WAAWF,QAAQ,iBAAR,CAAjB;AACA,MAAMG,YAAYH,QAAQ,WAAR,CAAlB;AACAI,OAAOC,OAAP,GAAiB,cAAcN,IAAd,CAAmB;AAChC;;;;AAIA;AACMO,uBAAN,GAA4B;AAAA;;AAAA;AACxB,kBAAMC,UAAU,MAAKC,GAAL,CAAS,SAAT,CAAhB;AACA,kBAAMC,YAAY,MAAM,MAAKC,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B;AAC9CC,oBAAIL;AAD0C,aAA1B,EAErBM,IAFqB,EAAxB;AAGA,gBAAIC,SAASL,UAAUM,OAAvB;AACA,gBAAIC,SAAS;AACZC,gCAAgB,YADJ;AAEZC,0BAAUC,SAAS,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAhC;AAFE,aAAb;AAIA,kBAAMC,aAAa,MAAKZ,KAAL,CAAW,OAAX,CAAnB;AACA,kBAAMY,WAAWC,aAAX,CAAyBd,UAAUG,EAAnC,EAAuCI,MAAvC,CAAN;AACA,kBAAKQ,QAAL,CAAcf,SAAd;AACN,mBAAO,MAAKgB,OAAL,EAAP;AAb8B;AAc3B;AACD;AACMC,sBAAN,GAA2B;AAAA;;AAAA;AACvB,kBAAMnB,UAAU,OAAKC,GAAL,CAAS,SAAT,CAAhB;AACA,kBAAMC,YAAY,MAAM,OAAKC,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B;AAC9CC,oBAAIL;AAD0C,aAA1B,EAErBM,IAFqB,EAAxB;AAGA;AACA,gBAAIc,aAAa,MAAM,OAAKjB,KAAL,CAAW,aAAX,EAA0BC,KAA1B,CAAgC;AACnDiB,0BAASrB,OAD0C;AAEnDsB,2BAAU;AAFyC,aAAhC,EAGpBC,MAHoB,EAAvB;AAIA,gBAAIC,aAAa,CAAjB;AACA,gBAAIC,aAAa,CAAjB;AACA,iBAAI,MAAMC,IAAV,IAAkBN,UAAlB,EAA6B;AACzB,oBAAIO,UAAU,MAAM,OAAKxB,KAAL,CAAW,SAAX,EAAsBC,KAAtB,CAA4B;AAC5CC,wBAAGqB,KAAKE;AADoC,iBAA5B,EAEjBtB,IAFiB,EAApB;AAGA,oBAAGoB,KAAKG,MAAL,GAAcF,QAAQG,YAAzB,EAAsC;AAClCL;AACH;AACD,oBAAGC,KAAKK,YAAL,IAAqBJ,QAAQI,YAAhC,EAA6C;AACzCP;AACH;AACJ;AACD,gBAAGC,aAAa,CAAhB,EAAkB;AACd,uBAAO,OAAKO,IAAL,CAAU,GAAV,EAAe,YAAf,CAAP;AACH;AACD,gBAAGR,aAAa,CAAhB,EAAkB;AACd,uBAAO,OAAKQ,IAAL,CAAU,GAAV,EAAe,cAAf,CAAP;AACH;AACD,gBAAIC,MAAMC,OAAN,CAAchC,SAAd,CAAJ,EAA8B;AAC1B,uBAAO,OAAK8B,IAAL,CAAU,GAAV,EAAe,OAAf,CAAP;AACH;AACD,gBAAIpB,SAASV,UAAUiC,UAAnB,MAAmC,CAAvC,EAA0C;AACtC,uBAAO,OAAKH,IAAL,CAAU,GAAV,EAAe,eAAf,CAAP;AACH;AACD,kBAAMI,SAAS,MAAM,OAAKjC,KAAL,CAAW,MAAX,EAAmBC,KAAnB,CAAyB;AAC1CC,oBAAIH,UAAUM;AAD4B,aAAzB,EAElB6B,QAFkB,CAET,eAFS,EAEQ,IAFR,CAArB;AAGA,gBAAIJ,MAAMC,OAAN,CAAcE,MAAd,CAAJ,EAA2B;AACvB,uBAAO,OAAKJ,IAAL,CAAU,GAAV,EAAe,SAAf,CAAP;AACH;AACD,kBAAMM,gBAAgB,OAAKC,OAAL,CAAa,QAAb,EAAuB,KAAvB,CAAtB;AACA,gBAAI;AACA,sBAAMC,eAAe,MAAMF,cAAcG,kBAAd,CAAiC;AACxDL,4BAAQA,MADgD;AAExDM,0BAAM,YAAYxC,UAAUyC,QAF4B;AAGxDC,kCAAc1C,UAAUyC,QAHgC;AAIxDE,+BAAWjC,SAASV,UAAU4C,YAAV,GAAyB,GAAlC,CAJ6C;AAKxDC,sCAAkB;AALsC,iBAAjC,CAA3B;AAOA,uBAAO,OAAK7B,OAAL,CAAasB,YAAb,CAAP;AACH,aATD,CASE,OAAOQ,GAAP,EAAY;AACV,uBAAO,OAAKhB,IAAL,CAAU,GAAV,EAAe,SAAf,CAAP;AACH;AArDsB;AAsD1B;AACKiB,gBAAN,GAAqB;AAAA;;AAAA;AACjB,kBAAMX,gBAAgB,OAAKC,OAAL,CAAa,QAAb,EAAuB,KAAvB,CAAtB;AACA,kBAAMW,OAAO,OAAKC,IAAL,CAAU,KAAV,CAAb;AACA,kBAAM1C,SAAS6B,cAAcc,SAAd,CAAwB,OAAKD,IAAL,CAAU,KAAV,CAAxB,CAAf;;AAEA,gBAAI,CAAC1C,MAAL,EAAa;AACT,oBAAI4C,OAAO,MAAX;AACA,uBAAO,OAAKC,IAAL,CAAUD,IAAV,CAAP;AACH;AACD,kBAAMtC,aAAa,OAAKZ,KAAL,CAAW,OAAX,CAAnB;AACA,kBAAMD,YAAY,MAAMa,WAAWwC,iBAAX,CAA6B9C,OAAOmC,YAApC,CAAxB;AACA,gBAAIX,MAAMC,OAAN,CAAchC,SAAd,CAAJ,EAA8B;AAC1B,oBAAImD,OAAO,MAAX;AACA,uBAAO,OAAKC,IAAL,CAAUD,IAAV,CAAP;AACH;AACD,gBAAIG,OAAO,MAAMzC,WAAW0C,cAAX,CAA0BvD,UAAUG,EAApC,CAAjB;AACA,gBAAImD,QAAQ,IAAZ,EAAkB;AACd,oBAAItD,UAAUwD,UAAV,IAAwB,CAA5B,EAA+B;AAAE;AAC7B,0BAAM3C,WAAWC,aAAX,CAAyBd,UAAUG,EAAnC,EAAuCI,MAAvC,CAAN;AACA,2BAAKQ,QAAL,CAAcf,SAAd;AACH;AACJ,aALD,MAKO;AACH,uBAAO,kGAAP;AACH;AACD,gBAAImD,OAAO,SAAX;AACA,mBAAO,OAAKC,IAAL,CAAUD,IAAV,CAAP;AAzBiB;AA0BpB;AACKpC,YAAN,CAAef,SAAf,EAA0B;AAAA;;AAAA;AACtB,gBAAIA,UAAUwD,UAAV,IAAwB,CAA5B,EAA+B;AAC3B,oBAAIC,iBAAiB,MAAM,OAAKxD,KAAL,CAAW,aAAX,EAA0BC,KAA1B,CAAgC;AACvDiB,8BAAUnB,UAAUG;AADmC,iBAAhC,EAExBkB,MAFwB,EAA3B;AAGA,qBAAK,MAAMqC,QAAX,IAAuBD,cAAvB,EAAuC;AACnC,wBAAIE,WAAWD,SAASC,QAAxB;AACA,wBAAIjC,aAAagC,SAAShC,UAA1B;AACA,wBAAIC,SAAS+B,SAAS/B,MAAtB;AACA,wBAAIiC,gBAAgBF,SAASG,4BAA7B;AACA,0BAAM,OAAK5D,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B;AAC5BC,4BAAIwD;AADwB,qBAA1B,EAEHG,SAFG,CAEO,cAFP,EAEuBnC,MAFvB,CAAN;AAGA,0BAAM,OAAK1B,KAAL,CAAW,OAAX,EAAoBC,KAApB,CAA0B;AAC5BC,4BAAIwD;AADwB,qBAA1B,EAEHI,SAFG,CAEO,aAFP,EAEsBpC,MAFtB,CAAN;AAGA,0BAAM,OAAK1B,KAAL,CAAW,SAAX,EAAsBC,KAAtB,CAA4B;AAC9BC,4BAAIuB;AAD0B,qBAA5B,EAEHoC,SAFG,CAEO,cAFP,EAEuBnC,MAFvB,CAAN;AAGH;AACD;AACH;AArBqB;AAsBzB;AA9H+B,CAApC",
    "file": "..\\..\\..\\src\\api\\controller\\pay.js",
    "sourcesContent": [
        "const Base = require('./base.js');\r\nconst moment = require('moment');\r\nconst generate = require('nanoid/generate');\r\nconst Jushuitan = require('jushuitan');\r\nmodule.exports = class extends Base {\r\n    /**\r\n     * 获取支付的请求参数\r\n     * @returns {Promise<PreventPromise|void|Promise>}\r\n     */\r\n    // 测试时付款，将真实接口注释。 在小程序的services/pay.js中按照提示注释和打开\r\n    async preWeixinPayaAction() {\r\n        const orderId = this.get('orderId');\r\n        const orderInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).find();\r\n        let userId = orderInfo.user_id;\r\n        let result = {\r\n        \ttransaction_id: 123123123123,\r\n        \ttime_end: parseInt(new Date().getTime() / 1000),\r\n        }\r\n        const orderModel = this.model('order');\r\n        await orderModel.updatePayData(orderInfo.id, result);\r\n        this.afterPay(orderInfo);\r\n\t\treturn this.success();\r\n    }\r\n    // 真实的付款接口\r\n    async preWeixinPayAction() {\r\n        const orderId = this.get('orderId');\r\n        const orderInfo = await this.model('order').where({\r\n            id: orderId\r\n        }).find();\r\n        // 再次确认库存和价格\r\n        let orderGoods = await this.model('order_goods').where({\r\n            order_id:orderId,\r\n            is_delete:0\r\n        }).select();\r\n        let checkPrice = 0;\r\n        let checkStock = 0;\r\n        for(const item of orderGoods){\r\n            let product = await this.model('product').where({\r\n                id:item.product_id\r\n            }).find();\r\n            if(item.number > product.goods_number){\r\n                checkStock++;\r\n            }\r\n            if(item.retail_price != product.retail_price){\r\n                checkPrice++;\r\n            }\r\n        }\r\n        if(checkStock > 0){\r\n            return this.fail(400, '库存不足，请重新下单');\r\n        }\r\n        if(checkPrice > 0){\r\n            return this.fail(400, '价格发生变化，请重新下单');\r\n        }\r\n        if (think.isEmpty(orderInfo)) {\r\n            return this.fail(400, '订单已取消');\r\n        }\r\n        if (parseInt(orderInfo.pay_status) !== 0) {\r\n            return this.fail(400, '订单已支付，请不要重复操作');\r\n        }\r\n        const openid = await this.model('user').where({\r\n            id: orderInfo.user_id\r\n        }).getField('weixin_openid', true);\r\n        if (think.isEmpty(openid)) {\r\n            return this.fail(400, '微信支付失败?');\r\n        }\r\n        const WeixinSerivce = this.service('weixin', 'api');\r\n        try {\r\n            const returnParams = await WeixinSerivce.createUnifiedOrder({\r\n                openid: openid,\r\n                body: '[海风小店]：' + orderInfo.order_sn,\r\n                out_trade_no: orderInfo.order_sn,\r\n                total_fee: parseInt(orderInfo.actual_price * 100),\r\n                spbill_create_ip: ''\r\n            });\r\n            return this.success(returnParams);\r\n        } catch (err) {\r\n            return this.fail(400, '微信支付失败?');\r\n        }\r\n    }\r\n    async notifyAction() {\r\n        const WeixinSerivce = this.service('weixin', 'api');\r\n        const data = this.post('xml');\r\n        const result = WeixinSerivce.payNotify(this.post('xml'));\r\n        \r\n        if (!result) {\r\n            let echo = 'FAIL';\r\n            return this.json(echo);\r\n        }\r\n        const orderModel = this.model('order');\r\n        const orderInfo = await orderModel.getOrderByOrderSn(result.out_trade_no);\r\n        if (think.isEmpty(orderInfo)) {\r\n            let echo = 'FAIL';\r\n            return this.json(echo);\r\n        }\r\n        let bool = await orderModel.checkPayStatus(orderInfo.id);\r\n        if (bool == true) {\r\n            if (orderInfo.order_type == 0) { //普通订单和秒杀订单\r\n                await orderModel.updatePayData(orderInfo.id, result);\r\n                this.afterPay(orderInfo);\r\n            } \r\n        } else {\r\n            return '<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[订单已支付]]></return_msg></xml>';\r\n        }\r\n        let echo = 'SUCCESS'\r\n        return this.json(echo);\r\n    }\r\n    async afterPay(orderInfo) {\r\n        if (orderInfo.order_type == 0) {\r\n            let orderGoodsList = await this.model('order_goods').where({\r\n                order_id: orderInfo.id\r\n            }).select();\r\n            for (const cartItem of orderGoodsList) {\r\n                let goods_id = cartItem.goods_id;\r\n                let product_id = cartItem.product_id;\r\n                let number = cartItem.number;\r\n                let specification = cartItem.goods_specifition_name_value;\r\n                await this.model('goods').where({\r\n                    id: goods_id\r\n                }).decrement('goods_number', number);\r\n                await this.model('goods').where({\r\n                    id: goods_id\r\n                }).increment('sell_volume', number);\r\n                await this.model('product').where({\r\n                    id: product_id\r\n                }).decrement('goods_number', number);\r\n            }\r\n            // version 1.01\r\n        }\r\n    }\r\n};"
    ]
}