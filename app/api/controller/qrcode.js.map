{
    "version": 3,
    "sources": [
        "..\\..\\..\\src\\api\\controller\\qrcode.js"
    ],
    "names": [
        "Base",
        "require",
        "rp",
        "fs",
        "http",
        "path",
        "module",
        "exports",
        "getBase64Action",
        "goodsId",
        "post",
        "page",
        "sceneData",
        "options",
        "method",
        "url",
        "qs",
        "grant_type",
        "secret",
        "think",
        "config",
        "appid",
        "sessionData",
        "JSON",
        "parse",
        "token",
        "access_token",
        "data",
        "stringify",
        "options2",
        "host",
        "headers",
        "length",
        "uploadFunc",
        "Promise",
        "resolve",
        "reject",
        "req",
        "request",
        "res",
        "setEncoding",
        "imgData",
        "on",
        "chunk",
        "write",
        "end",
        "e",
        "success"
    ],
    "mappings": ";;AAAA,MAAMA,OAAOC,QAAQ,WAAR,CAAb;AACA,MAAMC,KAAKD,QAAQ,iBAAR,CAAX;AACA,MAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,MAAMG,OAAOH,QAAQ,OAAR,CAAb;AACA,MAAMI,OAAOJ,QAAQ,MAAR,CAAb;AACA;AACAK,OAAOC,OAAP,GAAiB,cAAcP,IAAd,CAAmB;AAC1BQ,mBAAN,GAAwB;AAAA;;AAAA;AACpB,gBAAIC,UAAU,MAAKC,IAAL,CAAU,SAAV,CAAd;AACA,gBAAIC,OAAO,mBAAX;AACA,gBAAIC,YAAYH,OAAhB;AACA,kBAAMI,UAAU;AACZC,wBAAQ,MADI;AAEZC,qBAAK,yCAFO;AAGZC,oBAAI;AACAC,gCAAY,mBADZ;AAEAC,4BAAQC,MAAMC,MAAN,CAAa,eAAb,CAFR;AAGAC,2BAAOF,MAAMC,MAAN,CAAa,cAAb;AAHP;AAHQ,aAAhB;AASA,gBAAIE,cAAc,MAAMpB,GAAGW,OAAH,CAAxB;AACAS,0BAAcC,KAAKC,KAAL,CAAWF,WAAX,CAAd;AACA,gBAAIG,QAAQH,YAAYI,YAAxB;AACA,gBAAIC,OAAO;AACP,yBAASf,SADF,EACa;AACpB,wBAAQD,IAFD;AAGP,yBAAS;AAHF,aAAX;AAKAgB,mBAAOJ,KAAKK,SAAL,CAAeD,IAAf,CAAP;AACA,gBAAIE,WAAW;AACXf,wBAAQ,MADG;AAEXgB,sBAAM,mBAFK;AAGXzB,sBAAM,yCAAyCoB,KAHpC;AAIXM,yBAAS;AACL,oCAAgB,kBADX;AAEL,sCAAkBJ,KAAKK;AAFlB;AAJE,aAAf;AASA,kBAAMC;AAAA,6CAAa,aAAY;AAC3B,2BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,4BAAI;AACA,gCAAIC,MAAMjC,KAAKkC,OAAL,CAAaT,QAAb,EAAuB,UAASU,GAAT,EAAc;AAC3CA,oCAAIC,WAAJ,CAAgB,QAAhB;AACA,oCAAIC,UAAU,EAAd;AACAF,oCAAIG,EAAJ,CAAO,MAAP,EAAe,UAASC,KAAT,EAAgB;AAC3BF,+CAAWE,KAAX;AACH,iCAFD;AAGAJ,oCAAIG,EAAJ,CAAO,KAAP,EAAc,YAAW;AACrB,2CAAOP,QAAQM,OAAR,CAAP;AACH,iCAFD;AAGH,6BATS,CAAV;AAUAJ,gCAAIO,KAAJ,CAAUjB,IAAV;AACAU,gCAAIQ,GAAJ;AACH,yBAbD,CAaE,OAAOC,CAAP,EAAU;AACR,mCAAOX,QAAQ,IAAR,CAAP;AACH;AACJ,qBAjBM,CAAP;AAkBH,iBAnBK;;AAAA;AAAA;AAAA;AAAA,gBAAN;AAoBA,kBAAMpB,MAAM,MAAMkB,YAAlB;AACA,mBAAO,MAAKc,OAAL,CAAahC,GAAb,CAAP;AApDoB;AAqDvB;AAtD+B,CAApC",
    "file": "..\\..\\..\\src\\api\\controller\\qrcode.js",
    "sourcesContent": [
        "const Base = require('./base.js');\r\nconst rp = require('request-promise');\r\nconst fs = require('fs');\r\nconst http = require(\"https\");\r\nconst path = require('path');\r\n// const mineType = require('mime-types');\r\nmodule.exports = class extends Base {\r\n    async getBase64Action() {\r\n        let goodsId = this.post('goodsId');\r\n        let page = \"pages/goods/goods\";\r\n        let sceneData = goodsId;\r\n        const options = {\r\n            method: 'POST',\r\n            url: 'https://api.weixin.qq.com/cgi-bin/token',\r\n            qs: {\r\n                grant_type: 'client_credential',\r\n                secret: think.config('weixin.secret'),\r\n                appid: think.config('weixin.appid')\r\n            }\r\n        };\r\n        let sessionData = await rp(options);\r\n        sessionData = JSON.parse(sessionData);\r\n        let token = sessionData.access_token;\r\n        let data = {\r\n            \"scene\": sceneData, //第一个参数是抽奖ID，第二个是userId，第三个是share=1\r\n            \"page\": page,\r\n            \"width\": 200\r\n        };\r\n        data = JSON.stringify(data);\r\n        var options2 = {\r\n            method: \"POST\",\r\n            host: \"api.weixin.qq.com\",\r\n            path: \"/wxa/getwxacodeunlimit?access_token=\" + token,\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Content-Length\": data.length\r\n            }\r\n        };\r\n        const uploadFunc = async () => {\r\n            return new Promise((resolve, reject) => {\r\n                try {\r\n                    var req = http.request(options2, function(res) {\r\n                        res.setEncoding(\"base64\");\r\n                        var imgData = \"\";\r\n                        res.on('data', function(chunk) {\r\n                            imgData += chunk;\r\n                        });\r\n                        res.on(\"end\", function() {\r\n                            return resolve(imgData);\r\n                        });\r\n                    });\r\n                    req.write(data);\r\n                    req.end();\r\n                } catch (e) {\r\n                    return resolve(null);\r\n                }\r\n            })\r\n        };\r\n        const url = await uploadFunc();\r\n        return this.success(url);\r\n    }\r\n}"
    ]
}